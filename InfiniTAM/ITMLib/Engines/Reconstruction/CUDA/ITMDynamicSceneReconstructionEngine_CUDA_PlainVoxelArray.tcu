//  ================================================================
//  Created by Gregory Kramida on 7/24/18.
//  Copyright (c) 2018-2025 Gregory Kramida
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at

//  http://www.apache.org/licenses/LICENSE-2.0

//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//  ================================================================
#pragma once

#include "ITMDynamicSceneReconstructionEngine_CUDA.h"
#include "../Shared/ITMDynamicSceneReconstructionEngine_Shared.h"
#include "../../../Objects/Scene/ITMTrilinearInterpolation.h"
#include "../../Common/ITMCommonFunctors.h"
#include "../../../../ORUtils/JetbrainsCUDASyntax.hpp"

using namespace ITMLib;

//TODO: refactor this to use CUDA-based traversal methods where applicable -Greg (GitHub: Algomorph)

namespace {
// device functions

template<typename TVoxel>
__global__ void integrateIntoScene_device(TVoxel* voxelArray, const ITMPlainVoxelArray::ITMVoxelArrayInfo* arrayInfo,
                                          const Vector4u* rgb, Vector2i rgbImgSize, const float* depth,
                                          const float* confidence,
                                          Vector2i depthImgSize, Matrix4f M_d, Matrix4f M_rgb, Vector4f projParams_d,
                                          Vector4f projParams_rgb, float _voxelSize, float mu, int maxW) {
	int x = blockIdx.x * blockDim.x + threadIdx.x;
	int y = blockIdx.y * blockDim.y + threadIdx.y;
	int z = blockIdx.z * blockDim.z + threadIdx.z;

	Vector4f pt_model;
	int locId;

	locId = x + y * arrayInfo->size.x + z * arrayInfo->size.x * arrayInfo->size.y;

	pt_model.x = (float) (x + arrayInfo->offset.x) * _voxelSize;
	pt_model.y = (float) (y + arrayInfo->offset.y) * _voxelSize;
	pt_model.z = (float) (z + arrayInfo->offset.z) * _voxelSize;
	pt_model.w = 1.0f;

	ComputeUpdatedLiveVoxelInfo<TVoxel::hasColorInformation, TVoxel::hasConfidenceInformation, TVoxel::hasSemanticInformation, TVoxel>::compute(
			voxelArray[locId], pt_model, M_d, projParams_d, M_rgb, projParams_rgb, mu, maxW, depth, confidence,
			depthImgSize, rgb, rgbImgSize);
}

template<typename TVoxel>
__global__ void fuseSdf2Sdf_device(TVoxel* voxelArrayLive, TVoxel* voxelArrayCanonical,
                                   const ITMPlainVoxelArray::ITMVoxelArrayInfo* arrayInfo, int maximumWeight) {
	int x = blockIdx.x * blockDim.x + threadIdx.x;
	int y = blockIdx.y * blockDim.y + threadIdx.y;
	int z = blockIdx.z * blockDim.z + threadIdx.z;

	int locId = x + y * arrayInfo->size.x + z * arrayInfo->size.x * arrayInfo->size.y;

	fuseLiveVoxelIntoCanonical(voxelArrayLive[locId], maximumWeight, voxelArrayCanonical[locId]);
}

template<typename TVoxel>
__global__ void
clearFields_device(TVoxel* voxelArray, const ITMPlainVoxelArray::ITMVoxelArrayInfo* arrayInfo) {
	int x = blockIdx.x * blockDim.x + threadIdx.x;
	int y = blockIdx.y * blockDim.y + threadIdx.y;
	int z = blockIdx.z * blockDim.z + threadIdx.z;

	int locId = x + y * arrayInfo->size.x + z * arrayInfo->size.x * arrayInfo->size.y;
	TVoxel& voxel = voxelArray[locId];
	voxel.flags = ITMLib::VOXEL_UNKNOWN;
	voxel.sdf = TVoxel::SDF_initialValue();
}

template<typename TVoxel, typename TWarp, typename TLookupPositionFunctor>
__global__ void interpolateTriliearlyBetweenIndexedFields(
		TWarp* warpSourceVoxels,
		TVoxel* sdfSourceVoxels,
		TVoxel* sdfTargetVoxels,
		const ITMPlainVoxelArray::IndexData* sdfSourceIndexData) {

	int x = blockIdx.x * blockDim.x + threadIdx.x;
	int y = blockIdx.y * blockDim.y + threadIdx.y;
	int z = blockIdx.z * blockDim.z + threadIdx.z;

	int locId = x + y * sdfSourceIndexData->size.x + z * sdfSourceIndexData->size.x * sdfSourceIndexData->size.y;

	TVoxel& destinationVoxel = sdfTargetVoxels[locId];
	TWarp& warp = warpSourceVoxels[locId];
	ITMPlainVoxelArray::IndexCache sdfSourceCache;

	Vector3i warpAndDestinationVoxelPosition;

	warpAndDestinationVoxelPosition.x = x + sdfSourceIndexData->offset.x;
	warpAndDestinationVoxelPosition.y = y + sdfSourceIndexData->offset.y;
	warpAndDestinationVoxelPosition.z = z + sdfSourceIndexData->offset.z;

	interpolateTSDFVolume<TVoxel, TWarp, ITMPlainVoxelArray, TLookupPositionFunctor>(
			sdfSourceVoxels, sdfSourceIndexData, sdfSourceCache,
			warp, destinationVoxel,
			warpAndDestinationVoxelPosition, false);
}

template<typename TVoxelMulti>
__global__ void
copyScene_device(TVoxelMulti* sourceVoxels,
                 TVoxelMulti* targetVoxels,
                 const ITMPlainVoxelArray::ITMVoxelArrayInfo* arrayInfo) {
	int x = blockIdx.x * blockDim.x + threadIdx.x;
	int y = blockIdx.y * blockDim.y + threadIdx.y;
	int z = blockIdx.z * blockDim.z + threadIdx.z;

	int locId = x + y * arrayInfo->size.x + z * arrayInfo->size.x * arrayInfo->size.y;
	TVoxelMulti& targetVoxel = targetVoxels[locId];
	TVoxelMulti& sourceVoxel = sourceVoxels[locId];
	sourceVoxel.sdf = targetVoxel.sdf;
	sourceVoxel.flags = targetVoxel.flags;

}

} //namespace

template<typename TVoxel, typename TWarp>
void ITMDynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, ITMPlainVoxelArray>::UpdateVisibleList(
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* scene, const ITMView* view, const ITMTrackingState* trackingState,
		const ITMRenderState* renderState, bool resetVisibleList) {
	//do nothing
}

template<typename TVoxel, typename TWarp>
void
ITMDynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, ITMPlainVoxelArray>::GenerateRawLiveSceneFromView(
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* scene, const ITMView* view, const ITMTrackingState* trackingState,
		const ITMRenderState* renderState) {
	liveSceneManager.ResetScene(scene);
	this->IntegrateIntoScene(scene, view, trackingState, renderState);
}

template<typename TVoxel, typename TWarp>
void ITMDynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, ITMPlainVoxelArray>::FuseLiveIntoCanonicalSdf(
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* canonicalScene,
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* liveScene) {

	TVoxel* liveVoxels = liveScene->localVBA.GetVoxelBlocks();
	TVoxel* canonicalVoxels = canonicalScene->localVBA.GetVoxelBlocks();
	const ITMPlainVoxelArray::ITMVoxelArrayInfo* arrayInfo = canonicalScene->index.getIndexData();
	int maxW = canonicalScene->sceneParams->maxW;

	dim3 cudaBlockSize(8, 8, 8);
	dim3 gridSize(canonicalScene->index.getVolumeSize().x / cudaBlockSize.x,
	              canonicalScene->index.getVolumeSize().y / cudaBlockSize.y,
	              canonicalScene->index.getVolumeSize().z / cudaBlockSize.z);

	fuseSdf2Sdf_device<TVoxel>
			<< < gridSize, cudaBlockSize >> >
	                       (liveVoxels, canonicalVoxels, arrayInfo, maxW);
	ORcudaKernelCheck;
}

template<typename TVoxel, typename TWarp>
template<WarpType TWarpType>
void ITMDynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, ITMPlainVoxelArray>::WarpScene(
		ITMVoxelVolume<TWarp, ITMPlainVoxelArray>* warpField,
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* sourceTSDF,
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* targetTSDF) {

	TVoxel* sourceVoxels = sourceTSDF->localVBA.GetVoxelBlocks();
	TVoxel* targetVoxels = targetTSDF->localVBA.GetVoxelBlocks();
	TWarp* warpVoxels = warpField->localVBA.GetVoxelBlocks();
	const ITMPlainVoxelArray::ITMVoxelArrayInfo* arrayInfo = sourceTSDF->index.getIndexData();

	dim3 cudaBlockSize(8, 8, 8);
	dim3 gridSize(sourceTSDF->index.getVolumeSize().x / cudaBlockSize.x,
	              sourceTSDF->index.getVolumeSize().y / cudaBlockSize.y,
	              sourceTSDF->index.getVolumeSize().z / cudaBlockSize.z);

	clearFields_device<TVoxel> << < gridSize, cudaBlockSize >> >
	                                          (targetVoxels, arrayInfo);
	ORcudaKernelCheck;
	interpolateTriliearlyBetweenIndexedFields<TVoxel, TWarp, WarpVoxelStaticFunctor<TWarp, TWarpType>>
			<< < gridSize, cudaBlockSize >> > (warpVoxels, sourceVoxels, targetVoxels, arrayInfo);
	ORcudaKernelCheck;
}

template<typename TVoxel, typename TWarp>
void ITMDynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, ITMPlainVoxelArray>::CopyScene(
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* sourceTSDF,
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* targetTSDF) {

	TVoxel* sourceVoxels = sourceTSDF->localVBA.GetVoxelBlocks();
	TVoxel* targetVoxels = targetTSDF->localVBA.GetVoxelBlocks();
	const ITMPlainVoxelArray::ITMVoxelArrayInfo* arrayInfo = sourceTSDF->index.getIndexData();

	dim3 cudaBlockSize(8, 8, 8);
	dim3 gridSize(sourceTSDF->index.getVolumeSize().x / cudaBlockSize.x,
	              sourceTSDF->index.getVolumeSize().y / cudaBlockSize.y,
	              sourceTSDF->index.getVolumeSize().z / cudaBlockSize.z);

	copyScene_device < TVoxel > << < gridSize, cudaBlockSize >> >
	                                        (sourceVoxels, targetVoxels, arrayInfo);
	ORcudaKernelCheck;

}


template<typename TVoxel, typename TWarp>
void ITMDynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, ITMPlainVoxelArray>::IntegrateIntoScene(
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* scene, const ITMView* view, const ITMTrackingState* trackingState,
		const ITMRenderState* renderState) {
	Vector2i rgbImgSize = view->rgb->noDims;
	Vector2i depthImgSize = view->depth->noDims;
	float voxelSize = scene->sceneParams->voxelSize;

	Matrix4f M_d, M_rgb;
	Vector4f projParams_d, projParams_rgb;

	M_d = trackingState->pose_d->GetM();
	if (TVoxel::hasColorInformation) M_rgb = view->calib.trafo_rgb_to_depth.calib_inv * M_d;

	projParams_d = view->calib.intrinsics_d.projectionParamsSimple.all;
	projParams_rgb = view->calib.intrinsics_rgb.projectionParamsSimple.all;

	float mu = scene->sceneParams->mu;
	int maxW = scene->sceneParams->maxW;

	float* depth = view->depth->GetData(MEMORYDEVICE_CUDA);
	float* confidence = view->depthConfidence->GetData(MEMORYDEVICE_CUDA);
	Vector4u* rgb = view->rgb->GetData(MEMORYDEVICE_CUDA);
	TVoxel* localVBA = scene->localVBA.GetVoxelBlocks();
	const ITMPlainVoxelArray::ITMVoxelArrayInfo* arrayInfo = scene->index.getIndexData();

	dim3 cudaBlockSize(8, 8, 8);
	dim3 gridSize(scene->index.getVolumeSize().x / cudaBlockSize.x,
	              scene->index.getVolumeSize().y / cudaBlockSize.y,
	              scene->index.getVolumeSize().z / cudaBlockSize.z);

	integrateIntoScene_device<TVoxel> << < gridSize, cudaBlockSize >> > (localVBA, arrayInfo,
			rgb, rgbImgSize, depth, confidence, depthImgSize, M_d, M_rgb, projParams_d, projParams_rgb, voxelSize, mu, maxW);
	ORcudaKernelCheck;

}

template<typename TVoxel, typename TWarp>
void
ITMDynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, ITMPlainVoxelArray>::WarpScene_CumulativeWarps(
		ITMVoxelVolume<TWarp, ITMPlainVoxelArray>* warpField,
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* sourceTSDF,
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* targetTSDF) {
	this->template WarpScene<WARP_CUMULATIVE>(warpField, sourceTSDF, targetTSDF);
}

template<typename TVoxel, typename TWarp>
void ITMDynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, ITMPlainVoxelArray>::WarpScene_FlowWarps(
		ITMVoxelVolume<TWarp, ITMPlainVoxelArray>* warpField,
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* sourceTSDF,
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* targetTSDF) {
	this->template WarpScene<WARP_FLOW>(warpField, sourceTSDF, targetTSDF);
}

template<typename TVoxel, typename TWarp>
void ITMDynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, ITMPlainVoxelArray>::WarpScene_WarpUpdates(
		ITMVoxelVolume<TWarp, ITMPlainVoxelArray>* warpField,
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* sourceTSDF,
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* targetTSDF) {
	this->template WarpScene<WARP_UPDATE>(warpField, sourceTSDF, targetTSDF);
}
