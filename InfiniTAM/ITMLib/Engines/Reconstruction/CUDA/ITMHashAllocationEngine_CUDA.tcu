//  ================================================================
//  Created by Gregory Kramida on 10/8/19.
//  Copyright (c) 2019 Gregory Kramida
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at

//  http://www.apache.org/licenses/LICENSE-2.0

//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//  ================================================================
#include "ITMHashAllocationEngine_CUDA.h"

using namespace ITMLib;


template<typename TVoxel, typename TWarp>
ITMHashAllocationEngine_CUDA<TVoxel, TWarp>::ITMHashAllocationEngine_CUDA() {

}

template<typename TVoxel, typename TWarp>
ITMHashAllocationEngine_CUDA<TVoxel, TWarp>::~ITMHashAllocationEngine_CUDA() {

}

template<typename TVoxel, typename TWarp>
void ITMHashAllocationEngine_CUDA<TVoxel, TWarp>::AllocateFromDepth(ITMVoxelVolume<TVoxel, ITMVoxelBlockHash>* scene,
                                                                    const ITMView* view,
                                                                    const ITMTrackingState* trackingState,
                                                                    const ITMRenderState* renderState,
                                                                    bool onlyUpdateVisibleList, bool resetVisibleList) {

}

template<typename TVoxel, typename TWarp>
void ITMHashAllocationEngine_CUDA<TVoxel, TWarp>::AllocateTSDFVolumeFromTSDFVolume(
		ITMVoxelVolume<TVoxel, ITMVoxelBlockHash>* targetVolume,
		ITMVoxelVolume<TVoxel, ITMVoxelBlockHash>* sourceVolume) {
	DIEWITHEXCEPTION_REPORTLOCATION("Not implemented!")
}

template<typename TVoxel, typename TWarp>
void ITMHashAllocationEngine_CUDA<TVoxel, TWarp>::AllocateWarpVolumeFromTSDFVolume(
		ITMVoxelVolume<TWarp, ITMVoxelBlockHash>* targetVolume,
		ITMVoxelVolume<TVoxel, ITMVoxelBlockHash>* sourceVolume) {
	DIEWITHEXCEPTION_REPORTLOCATION("Not implemented!")
}

template<typename TVoxel, typename TWarp>
template<WarpType TWarpType>
void ITMHashAllocationEngine_CUDA<TVoxel, TWarp>::AllocateFromWarpedVolume(
		ITMVoxelVolume<TWarp, ITMVoxelBlockHash>* warpField, ITMVoxelVolume<TVoxel, ITMVoxelBlockHash>* sourceTSDF,
		ITMVoxelVolume<TVoxel, ITMVoxelBlockHash>* targetTSDF) {
	DIEWITHEXCEPTION_REPORTLOCATION("Not implemented!")
}

template<typename TVoxel, typename TWarp>
template<typename TVoxelTarget, typename TVoxelSource>
void ITMHashAllocationEngine_CUDA<TVoxel, TWarp>::AllocateFromVolumeGeneric(
		ITMVoxelVolume<TVoxelTarget, ITMVoxelBlockHash>* targetVolume,
		ITMVoxelVolume<TVoxelSource, ITMVoxelBlockHash>* sourceVolume) {
	DIEWITHEXCEPTION_REPORTLOCATION("Not implemented!")
}
