//  ================================================================
//  Created by Gregory Kramida on 7/26/18.
//  Copyright (c) 2018-2025 Gregory Kramida
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at

//  http://www.apache.org/licenses/LICENSE-2.0

//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//  ================================================================
#pragma once


#include "../../Engines/Manipulation/CUDA/ITMSceneTraversal_CUDA_PlainVoxelArray.h"
#include "ITMSceneMotionTracker_CUDA.h"
#include "../Shared/ITMSceneMotionTracker_Functors.h"

namespace {


//TODO: incomplete
template<typename TVoxel, typename TWarp>
__global__ void
computeGradientDataTerm(TVoxel* liveVoxels,
                        TVoxel* canonicalVoxels,
                        TWarp* warpField,
                        const ITMLib::ITMPlainVoxelArray::ITMVoxelArrayInfo* arrayInfo) {
	int x = blockIdx.x * blockDim.x + threadIdx.x;
	int y = blockIdx.y * blockDim.y + threadIdx.y;
	int z = blockIdx.z * blockDim.z + threadIdx.z;

	int locId = x + y * arrayInfo->size.x + z * arrayInfo->size.x * arrayInfo->size.y;

	Vector3i voxelPosition;

	voxelPosition.x = x + arrayInfo->offset.x;
	voxelPosition.y = y + arrayInfo->offset.y;
	voxelPosition.z = z + arrayInfo->offset.z;


	TVoxelLive& voxelLive = liveVoxels[locId];
	TVoxelCanonical& voxelCanonical = canonicalVoxels[locId];
	if (!VoxelIsConsideredForTracking(voxelCanonical, voxelLive, sourceFieldIndex)
	    || !VoxelIsConsideredForDataTerm(voxelCanonical, voxelLive, sourceFieldIndex))
		return;
	Vector3f liveSdfJacobian;
	Matrix3f liveSdfHessian;

	ITMLib::ITMPlainVoxelArray::IndexCache liveCache;

	ComputeLiveJacobian_CentralDifferences_IndexedFields(
			liveSdfJacobian, voxelPosition, liveVoxels, arrayInfo, liveCache, sourceFieldIndex);

};
}


using namespace ITMLib;


template<typename TVoxel, typename TWarp>
ITMSceneMotionTracker_CUDA<TVoxel, TWarp, ITMPlainVoxelArray>::ITMSceneMotionTracker_CUDA()
		: ITMSceneMotionTracker<TVoxel, TWarp, ITMPlainVoxelArray>() {

}

template<typename TVoxel, typename TWarp>
void ITMSceneMotionTracker_CUDA<TVoxel, TWarp, ITMPlainVoxelArray>::ClearOutFlowWarp(
		ITMVoxelVolume<TWarp, ITMPlainVoxelArray>* warpField) {
	ITMSceneTraversalEngine<TWarp, ITMPlainVoxelArray, ITMLibSettings::DEVICE_CUDA>::template
	StaticVoxelTraversal<ClearOutFlowWarpStaticFunctor<TWarp> >(warpField);

}

template<typename TVoxel, typename TWarp>
void ITMSceneMotionTracker_CUDA<TVoxel, TWarp, ITMPlainVoxelArray>::AddFlowWarpToWarp(
		ITMVoxelVolume<TWarp, ITMPlainVoxelArray>* warpField, bool clearFlowWarp) {

	AddFlowWarpToWarp_common<TWarp, ITMPlainVoxelArray, ITMLibSettings::DEVICE_CUDA>(warpField, clearFlowWarp);
}

template<typename TVoxel, typename TWarp>
void ITMSceneMotionTracker_CUDA<TVoxel, TWarp, ITMPlainVoxelArray>::CalculateWarpGradient(
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* canonicalScene,
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* liveScene,
		ITMVoxelVolume<TWarp, ITMPlainVoxelArray>* warpField,
		bool restrictZTrackingForDebugging) {
	ITMSceneTraversalEngine<TWarp, ITMPlainVoxelArray, ITMLibSettings::DEVICE_CUDA>::template
	StaticVoxelTraversal<ClearOutGradientStaticFunctor<TWarp> >(warpField);

	TVoxel* liveVoxels = liveScene->localVBA.GetVoxelBlocks();
	TVoxel* canonicalVoxels = canonicalScene->localVBA.GetVoxelBlocks();
	TVoxel* warpVoxels = warpField->localVBA.GetVoxelBlocks();

	const ITMPlainVoxelArray::ITMVoxelArrayInfo* arrayInfo = liveScene->index.getIndexData();

	dim3 cudaBlockSize(8, 8, 8);
	dim3 gridSize(liveScene->index.getVolumeSize().x / cudaBlockSize.x,
	              liveScene->index.getVolumeSize().y / cudaBlockSize.y,
	              liveScene->index.getVolumeSize().z / cudaBlockSize.z);

	computeGradientDataTerm<TVoxel, TWarp>
			<< < gridSize, cudaBlockSize >> >
	                       (liveVoxels, canonicalVoxels, warpVoxels, arrayInfo);

	DIEWITHEXCEPTION_REPORTLOCATION("Implementation pending");

}

template<typename TVoxel, typename TWarp>
void ITMSceneMotionTracker_CUDA<TVoxel, TWarp, ITMPlainVoxelArray>::SmoothWarpGradient(
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* canonicalScene,
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* liveScene,
		ITMVoxelVolume<TWarp, ITMPlainVoxelArray>* warpField) {
	if (this->switches.enableGradientSmoothing) {
		SmoothWarpGradient_common<TVoxel, TWarp, ITMPlainVoxelArray, ITMLibSettings::DEVICE_CUDA>(
				liveScene, canonicalScene, warpField);
	}
}

template<typename TVoxel, typename TWarp>
float ITMSceneMotionTracker_CUDA<TVoxel, TWarp, ITMPlainVoxelArray>::UpdateWarps(
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* canonicalScene,
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* liveScene,
		ITMVoxelVolume<TWarp, ITMPlainVoxelArray>* warpField) {
	return UpdateWarps_common<TVoxel, TWarp, ITMPlainVoxelArray, ITMLibSettings::DEVICE_CUDA>
			(canonicalScene, liveScene, warpField, this->parameters.gradientDescentLearningRate,
			 this->switches.enableGradientSmoothing);
}

template<typename TVoxel, typename TWarp>
void ITMSceneMotionTracker_CUDA<TVoxel, TWarp, ITMPlainVoxelArray>::ResetWarps(
		ITMVoxelVolume<TWarp, ITMPlainVoxelArray>* warpField) {
	ITMSceneTraversalEngine<TWarp, ITMPlainVoxelArray, ITMLibSettings::DEVICE_CUDA>::template
	StaticVoxelTraversal<WarpClearFunctor<TWarp, TWarp::hasCumulativeWarp>>(warpField);
}
