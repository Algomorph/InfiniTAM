//  ================================================================
//  Created by Gregory Kramida on 7/26/18.
//  Copyright (c) 2018-2025 Gregory Kramida
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at

//  http://www.apache.org/licenses/LICENSE-2.0

//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//  ================================================================
#pragma once

#include "ITMSceneMotionTracker_CUDA.h"
#include "../../Engines/Traversal/CUDA/ITMSceneTraversal_CUDA_PlainVoxelArray.h"
#include "../Shared/ITMSceneMotionTracker_Functors.h"
#include "../Shared/ITMWarpGradientFunctors.h"
#include "ITMSceneMotionTracker_CUDA_PlainVoxelArray_Kernels.h"


using namespace ITMLib;


template<typename TVoxel, typename TWarp, typename TGradientFunctor>
ITMSceneMotionTracker_CUDA<TVoxel, TWarp, TGradientFunctor, ITMPlainVoxelArray>::ITMSceneMotionTracker_CUDA()
		: ITMSceneMotionTracker<TVoxel, TWarp, ITMPlainVoxelArray>() {

}

template<typename TVoxel, typename TWarp, typename TGradientFunctor>
void ITMSceneMotionTracker_CUDA<TVoxel, TWarp, TGradientFunctor, ITMPlainVoxelArray>::ClearOutFlowWarp(
		ITMVoxelVolume<TWarp, ITMPlainVoxelArray>* warpField) {
	ITMSceneTraversalEngine<TWarp, ITMPlainVoxelArray, ITMLibSettings::DEVICE_CUDA>::template
	StaticVoxelTraversal<ClearOutFlowWarpStaticFunctor<TWarp> >(warpField);

}

template<typename TVoxel, typename TWarp, typename TGradientFunctor>
void ITMSceneMotionTracker_CUDA<TVoxel, TWarp, TGradientFunctor, ITMPlainVoxelArray>::AddFlowWarpToWarp(
		ITMVoxelVolume<TWarp, ITMPlainVoxelArray>* warpField, bool clearFlowWarp) {

	AddFlowWarpToWarp_common<TWarp, ITMPlainVoxelArray, ITMLibSettings::DEVICE_CUDA>(warpField, clearFlowWarp);
}

template<typename TVoxel, typename TWarp, typename TGradientFunctor>
void ITMSceneMotionTracker_CUDA<TVoxel, TWarp, TGradientFunctor, ITMPlainVoxelArray>::CalculateWarpGradient(
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* canonicalScene,
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* liveScene,
		ITMVoxelVolume<TWarp, ITMPlainVoxelArray>* warpField,
		bool restrictZTrackingForDebugging) {

	ITMSceneTraversalEngine<TWarp, ITMPlainVoxelArray, ITMLibSettings::DEVICE_CUDA>::template
	StaticVoxelTraversal<ClearOutGradientStaticFunctor<TWarp> >(warpField);

	TVoxel* liveVoxels = liveScene->localVBA.GetVoxelBlocks();
	TVoxel* canonicalVoxels = canonicalScene->localVBA.GetVoxelBlocks();
	TWarp* warpVoxels = warpField->localVBA.GetVoxelBlocks();

	const ITMPlainVoxelArray::ITMVoxelArrayInfo* arrayInfo = liveScene->index.getIndexData();

	dim3 cudaBlockSize(SDF_BLOCK_SIZE, SDF_BLOCK_SIZE, SDF_BLOCK_SIZE);
	Vector3i volumeSize = liveScene->index.getVolumeSize();
	dim3 gridSize(
			static_cast<int>(ceil(static_cast<float>(volumeSize.x) / static_cast<float>(cudaBlockSize.x))),
			static_cast<int>(ceil(static_cast<float>(volumeSize.y) / static_cast<float>(cudaBlockSize.y))),
			static_cast<int>(ceil(static_cast<float>(volumeSize.z) / static_cast<float>(cudaBlockSize.z))));

//	computeGradientDataTerm<TVoxel, TWarp>
//			<< < gridSize, cudaBlockSize >> >
//	                       (liveVoxels, canonicalVoxels, warpVoxels, arrayInfo);
//
//	ITMSceneMotionDataTermFunctor<TVoxel,TWarp,ITMPlainVoxelArray::IndexData, ITMPlainVoxelArray::IndexCache>
//	        dataTermFunctor(liveVoxels, arrayInfo, parameters->weightDataTerm);
//	ITMDualSceneWarpTraversalEngine<TVoxel, TWarp, ITMPlainVoxelArray, ITMLibSettings::DEVICE_CUDA>::
//	DualVoxelPositionTraversal(liveScene, canonicalScene, warpField, dataTermFunctor);

	DIEWITHEXCEPTION_REPORTLOCATION("Implementation pending");

}

template<typename TVoxel, typename TWarp, typename TGradientFunctor>
void ITMSceneMotionTracker_CUDA<TVoxel, TWarp, TGradientFunctor, ITMPlainVoxelArray>::SmoothWarpGradient(
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* canonicalScene,
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* liveScene,
		ITMVoxelVolume<TWarp, ITMPlainVoxelArray>* warpField) {
	if (this->switches.enableGradientSmoothing) {
		SmoothWarpGradient_common<TVoxel, TWarp, ITMPlainVoxelArray, ITMLibSettings::DEVICE_CUDA>(
				liveScene, canonicalScene, warpField);
	}
}

template<typename TVoxel, typename TWarp, typename TGradientFunctor>
float ITMSceneMotionTracker_CUDA<TVoxel, TWarp, TGradientFunctor, ITMPlainVoxelArray>::UpdateWarps(
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* canonicalScene,
		ITMVoxelVolume<TVoxel, ITMPlainVoxelArray>* liveScene,
		ITMVoxelVolume<TWarp, ITMPlainVoxelArray>* warpField) {
	return UpdateWarps_common<TVoxel, TWarp, ITMPlainVoxelArray, ITMLibSettings::DEVICE_CUDA>
			(canonicalScene, liveScene, warpField, this->parameters.gradientDescentLearningRate,
			 this->switches.enableGradientSmoothing);
}

template<typename TVoxel, typename TWarp, typename TGradientFunctor>
void ITMSceneMotionTracker_CUDA<TVoxel, TWarp, TGradientFunctor, ITMPlainVoxelArray>::ResetWarps(
		ITMVoxelVolume<TWarp, ITMPlainVoxelArray>* warpField) {
	ITMSceneTraversalEngine<TWarp, ITMPlainVoxelArray, ITMLibSettings::DEVICE_CUDA>::template
	StaticVoxelTraversal<WarpClearFunctor<TWarp, TWarp::hasCumulativeWarp>>(warpField);
}

