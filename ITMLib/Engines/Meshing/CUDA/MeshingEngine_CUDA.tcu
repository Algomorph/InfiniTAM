//  ================================================================
//  Created by Gregory Kramida (https://github.com/Algomorph) on 4/27/20.
//  Copyright (c) 2020 Gregory Kramida
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at

//  http://www.apache.org/licenses/LICENSE-2.0

//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//  ================================================================

#include "MeshingEngine_CUDA.h"

#include "../Shared/MeshingEngine_Shared.h"
#include "../../../Utils/CUDA/CUDAUtils.h"
#include "../../../../ORUtils/CUDADefines.h"
#include "MeshingEngine_CUDA_Kernels.h"

using namespace ITMLib;


// region =================================== PlainVoxelArray ==========================================================

template<class TVoxel>
MeshingEngine_CUDA<TVoxel, PlainVoxelArray>::MeshingEngine_CUDA() {}

template<class TVoxel>
MeshingEngine_CUDA<TVoxel, PlainVoxelArray>::~MeshingEngine_CUDA() {}

template<class TVoxel>
Mesh MeshingEngine_CUDA<TVoxel, PlainVoxelArray>::MeshVolume(const VoxelVolume<TVoxel, PlainVoxelArray>* scene) {
	DIEWITHEXCEPTION_REPORTLOCATION("Not implemented");
	return Mesh();
}
// endregion ===========================================================================================================

// region =================================== VoxelBlockHash ===========================================================
template<class TVoxel>
MeshingEngine_CUDA<TVoxel, VoxelBlockHash>::MeshingEngine_CUDA()
		: MeshingEngine<TVoxel, VoxelBlockHash>() {}

template<class TVoxel>
MeshingEngine_CUDA<TVoxel, VoxelBlockHash>::~MeshingEngine_CUDA() {
}

template<class TVoxel>
Mesh MeshingEngine_CUDA<TVoxel, VoxelBlockHash>::MeshVolume(const VoxelVolume<TVoxel, VoxelBlockHash>* volume) {

	const int utilized_block_count = volume->index.GetUtilizedBlockCount();
	const int max_triangle_count = utilized_block_count * VOXEL_BLOCK_SIZE3;

	const float voxel_size = volume->GetParameters().voxel_size;

	ORUtils::MemoryBlock<Mesh::Triangle> triangles(max_triangle_count, MEMORYDEVICE_CUDA);
	Mesh::Triangle* triangles_device = triangles.GetData(MEMORYDEVICE_CUDA);
	const TVoxel* voxels = volume->GetVoxels();
	const HashEntry* hash_table = volume->index.GetEntries();

	ORUtils::MemoryBlock<unsigned int> triangle_count(1, true, true);
	*triangle_count.GetData(MEMORYDEVICE_CPU) = 0;
	triangle_count.UpdateDeviceFromHost();

	{ // mesh used voxel blocks
		dim3 cuda_block_size(VOXEL_BLOCK_SIZE, VOXEL_BLOCK_SIZE, VOXEL_BLOCK_SIZE);
		dim3 cuda_grid_size(ceil_of_integer_quotient(utilized_block_count, 16), 16);

		meshScene_device<TVoxel> <<< cuda_grid_size, cuda_block_size >>>
				(triangles_device, triangle_count.GetData(MEMORYDEVICE_CUDA), voxel_size,
				 utilized_block_count, voxels, hash_table, volume->index.GetUtilizedBlockHashCodes());
		ORcudaKernelCheck;
		triangle_count.UpdateHostFromDevice();

	}
	return Mesh(triangles, *triangle_count.GetData(MEMORYDEVICE_CPU));
}

// endregion ===========================================================================================================