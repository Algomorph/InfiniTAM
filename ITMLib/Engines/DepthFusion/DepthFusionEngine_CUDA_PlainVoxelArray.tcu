//  ================================================================
//  Created by Gregory Kramida on 7/24/18.
//  Copyright (c) 2018-2025 Gregory Kramida
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at

//  http://www.apache.org/licenses/LICENSE-2.0

//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//  ================================================================
#pragma once

#include "DepthFusionEngine_CUDA.h"

#include "../../Objects/Volume/TrilinearInterpolation.h"
#include "../Common/CommonFunctors.h"
#include "DepthFusionEngine_CUDA_PlainVoxelArray_Kernels.h"

#include "../Traversal/CUDA/VolumeTraversal_CUDA_PlainVoxelArray.h"

using namespace ITMLib;


template<typename TVoxel, typename TWarp>
void DepthFusionEngine_CUDA<TVoxel, TWarp, PlainVoxelArray>::UpdateVisibleList(
		VoxelVolume<TVoxel, PlainVoxelArray>* volume, const ITMView* view, const CameraTrackingState* trackingState,
		const RenderState* renderState, bool resetVisibleList) {
	//do nothing
}

template<typename TVoxel, typename TWarp>
void
DepthFusionEngine_CUDA<TVoxel, TWarp, PlainVoxelArray>::GenerateTsdfVolumeFromView(
		VoxelVolume<TVoxel, PlainVoxelArray>* volume, const ITMView* view,
		const CameraTrackingState* trackingState) {
	GenerateTsdfVolumeFromView(volume, view, trackingState->pose_d->GetM());
}

template<typename TVoxel, typename TWarp>
void DepthFusionEngine_CUDA<TVoxel, TWarp, PlainVoxelArray>::GenerateTsdfVolumeFromView(
		VoxelVolume<TVoxel, PlainVoxelArray>* volume, const ITMView* view, const Matrix4f& depth_camera_matrix) {
	volume->Reset();
	this->IntegrateDepthImageIntoTsdfVolume_Helper(volume, view, depth_camera_matrix);
}


template<typename TVoxel, typename TWarp>
void DepthFusionEngine_CUDA<TVoxel, TWarp, PlainVoxelArray>::GenerateTsdfVolumeFromViewExpanded(
		VoxelVolume<TVoxel, PlainVoxelArray>* volume,
		VoxelVolume<TVoxel, PlainVoxelArray>* temporaryAllocationVolume, const ITMView* view,
		const Matrix4f& depth_camera_matrix) {
	GenerateTsdfVolumeFromView(volume, view, depth_camera_matrix);
}

template<typename TVoxel, typename TWarp>
void DepthFusionEngine_CUDA<TVoxel, TWarp, PlainVoxelArray>::IntegrateDepthImageIntoTsdfVolume_Helper(
		VoxelVolume<TVoxel, PlainVoxelArray>* volume, const ITMView* view, Matrix4f depth_camera_matrix) {
	if(volume->sceneParams->stop_integration_at_max_weight){
		VoxelDepthIntegrationFunctor<TVoxel, MEMORYDEVICE_CUDA, true> integration_functor(volume, view, depth_camera_matrix);
		VolumeTraversalEngine<TVoxel, PlainVoxelArray, MEMORYDEVICE_CUDA>::VoxelPositionTraversal(volume, integration_functor);
	}else{
		VoxelDepthIntegrationFunctor<TVoxel, MEMORYDEVICE_CUDA, false> integration_functor(volume, view, depth_camera_matrix);
		VolumeTraversalEngine<TVoxel, PlainVoxelArray, MEMORYDEVICE_CUDA>::VoxelPositionTraversal(volume, integration_functor);
	}
}

template<typename TVoxel, typename TWarp>
void DepthFusionEngine_CUDA<TVoxel, TWarp, PlainVoxelArray>::IntegrateDepthImageIntoTsdfVolume(
		VoxelVolume<TVoxel, PlainVoxelArray>* volume, const ITMView* view, const CameraTrackingState* trackingState) {
	IntegrateDepthImageIntoTsdfVolume_Helper(volume, view, trackingState->pose_d->GetM());
}

template<typename TVoxel, typename TWarp>
void DepthFusionEngine_CUDA<TVoxel, TWarp, PlainVoxelArray>::IntegrateDepthImageIntoTsdfVolume(
		VoxelVolume<TVoxel, PlainVoxelArray>* volume, const ITMView* view) {
	IntegrateDepthImageIntoTsdfVolume_Helper(volume, view);
}

