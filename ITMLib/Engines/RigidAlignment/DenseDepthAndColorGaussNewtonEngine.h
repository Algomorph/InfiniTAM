//  ================================================================
//  Created by Gregory Kramida (https://github.com/Algomorph) on 1/13/21.
//  Copyright (c) 2021 Gregory Kramida
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at

//  http://www.apache.org/licenses/LICENSE-2.0

//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//  ================================================================
#pragma once

#include "RigidAlignmentEngineInterface.h"
#include "../ImageProcessing/ImageProcessingEngine.h"

namespace ITMLib{

/**
 * \brief This is a rigid alignment engine based on InfiniTAM.
 * \details It optimizes the point-to-plane
 * distance using dense depth information and intensity of the color images.
 *
 * Notation:
 * p ........ 3D points observed in the live (new) depth image, 3x1 vectors
 * R ........ Rotation matrix (optimization target), 3x3 matrix
 * t ........ Translation vector (optimization target), 3x1 vector
 * V ........ Map of surface points generated by ray-casting current cumulative scene data into the current (live) viewport
 * N ........ Map of surface normals generated by ray-casting current cumulative scene data into the current (live) viewport
 * C ........ Map of color (intensity) points generated by ray-casting current cumulative scene data into the current (live) viewport
 * p' ....... points p projected into the current (live) viewport to find corresponding ray-cast points in V and N
 * I ........ The live (new) color (intensity) image
 * π ........ Camera-space to image-space projection modifier (which uses the established cameras' calibration parameters)
 *
 * Point to plane distance objective function is given by:
 * ∑ <over p> ( (Rp + t - V(p'))ᵀ N(p') )²
 *
 * Dense intensity difference objective function is given by:
 * ∑ <over p>  ǁ I(π(Rp + t)) − C(p') ǁ₂
 *
 *
 * For more details, see:
 * Kähler, Olaf, Victor Adrian Prisacariu, Carl Yuheng Ren, Xin Sun, Philip Torr, and David Murray.
 * "Very high frame rate volumetric integration of depth images on mobile devices." IEEE transactions
 * on visualization and computer graphics 21, no. 11 (2015): 1241-1250.
 *
 * \tparam TMemoryDeviceType the type of device to use, supports: CPU or CUDA
 */
template<MemoryDeviceType TMemoryDeviceType>
class DenseDepthAndColorGaussNewtonEngine : public RigidAlignmentEngineInterface {
private: // instance variables
	ImageProcessingEngine<TMemoryDeviceType> image_processing_engine;
public: // instance functions
	DenseDepthAndColorGaussNewtonEngine();
	virtual ~DenseDepthAndColorGaussNewtonEngine();

	void TrackCamera(CameraTrackingState *tracking_state, const View *view);

	bool RequiresColorRendering() const { return false; }
	bool RequiresDepthReliability() const { return true; }
	bool RequiresPointCloudRendering() const { return true; }

	void SetupLevels(int iteration_count_coarse, int iteration_count_fine, float distance_threshold_coarse, float distance_threshold_fine, float color_threshold_coarse, float color_threshold_fine);

};


} // namespace ITMLib